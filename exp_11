clc;
clear all;

% Inputs
lambda = input('Enter the average call arrival rate (calls per hour): '); % Call arrival rate
ht = input('Enter the average call holding time (hours per call): ');     % Call holding time
B_target = input('Enter the target blocking probability (B): ');         % Target blocking probability

% Calculate Offered Load (A)
A = lambda * ht; % Offered Load in Erlangs
fprintf('Offered Load (A): %.4f Erlangs\n', A);

% Erlang B formula function using optimized computation
erlangB = @(A, N) (A^N / exp(gammaln(N + 1))) / sum(A.^[0:N] ./ exp(gammaln([0:N] + 1)));

% Part 2: Calculate Required Channels (N)
N = 1; % Start with one channel
while true
    B = erlangB(A, N);
    if B <= B_target
        break;
    end
    N = N + 1; % Increment channels until target blocking probability is met
end

% Output Results
fprintf('Required Service Channels (N): %d\n', N);
fprintf('Achieved Blocking Probability (B): %.6f\n', B);
