clc;
clear all;

% Inputs for calculating Offered Load
lambda = 100; % Average call arrival rate (calls per hour)
H = 0.1; % Average call holding time (hours per call)

% Calculate Offered Load (E)
E = lambda * H; % Traffic intensity in Erlangs

% Target blocking probability
targetBlockingProbability = 0.01; % Target blocking probability (1%)

% Start with one channel
N = 1;
while true
    % Calculate the Erlang B blocking probability
    numerator = (E^N) / factorial(N);
    denominator = sum((E.^[0:N]) ./ factorial([0:N]));
    blockingProbability = numerator / denominator;

    % Check if the blocking probability meets the target
    if blockingProbability <= targetBlockingProbability
        break;
    end

    % Increment the number of channels
    N = N + 1;
end

% Display the results
fprintf('Offered Load (E): %.2f Erlangs\n', E);
fprintf('Required Channels: %d\n', N);
fprintf('Blocking Probability: %.4f\n', blockingProbability);
